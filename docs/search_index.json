[["index.html", "Documentación interna CIT Prefacio", " Documentación interna CIT Equipo de Investigación (?) 2022-04-22 Prefacio En este libro iremos añadiendo la documentación de distintas cosas. Por el momento partiremos con tutoriales para el uso del controlador de versiones git en conjunto con GitHub. "],["1-git.html", "Chapter 1 Git + GitHub ", " Chapter 1 Git + GitHub "],["1.1-repos_config.html", "1.1 Configuración de repositorios", " 1.1 Configuración de repositorios 1.1.1 Crear repositorio Podemos hacer repositorio de dos formas distintas. Página web de GitHub Primero iniciamos sesión en GitHub Hacemos click en Create repository. Luego como owner seleccionamos la organización CIT-UAI Luego le damos a Create repository Ahora ya tenemos el repositorio creado en GitHub Ahora ya podemos hacer un Fork GitHub Desktop Luego de iniciar sesión el la aplicación, en el menú ponemos File &gt; New repository... Rellenamos la información del repositorio nuevo Hacemos click en Create repository para crear el repositorio de forma local Luego la aplicación nos muestra lo siguiente. Hacemos click en Publish repository para subir el repositorio a GitHub Nos aseguramos de seleccionar CIT-UAI en el campo Organization . Hacemos click en Publish repository para confirmar. Con esto subimos el repositorio que acabamos de crear localmente, al perfil (en GitHub) de la organización CIT-UAI La aplicación ahora se ve como la imagen a continuación Si en el menú nos vamos a Repository &gt; View on GitHub , veremos Ahora estamos listos para hacer un Fork 1.1.2 Crear un Fork Nos vamos a la página de GitHub del repositorio al que queremos hacerle el Fork . Hacemos click en el botón que dice Fork en la esquina superior derecha. Seleccionamos nuestra cuenta de GitHub Ahora, en la parte superior izquierda vemos que el repositorio ahora se encuentra en nuestro perfil, y que es un fork del repositorio del mismo nombre, pero del perfil CIT-UAI Ya tenemos el Fork creado, y ya podemos clonarlo ### Clonar Fork {#clonar_fork} Con un Fork ya creado, en la aplicación GitHub Desktop, en el menú, nos iremos a File &gt; Clone repository... En el menú que se nos abre, refrescamos la lista de repositorios Vemos como aparece el repositorio al que le hicimos Fork Lo seleccionamos y le damos click a Clone. ️ Es posible que de un problema con la carpeta de destino. Esto ocurrirá si anteriormente se creó el repositorio para el perfil de la organización (el repositorio del perfil UAI-CIT) desde el mismo computador que estás ocupando ahora. Esto lo podemos solucionar de dos formas sencillas Solución 1 La primera forma es corrigiendo el nombre de la carpeta de destino. Sugerimos añadir _fork al nombre de la carpeta de destino. Con esto la franja mostrando el error desaparece, y podemos hacer click en Clone sin problemas, y podemos continuar. Observación Luego de terminar de clonar el Fork en la lista de repositorios veremos los repositorios que se llaman igual, pero indicando a que perfil de GitHub es cada uno. Por otro lado en el visor de archivos veremos dos carpetas Acá repositorio1 es la copia local del repositorio del perfil CIT-UAI, mientras que repositorio1_fork es la copia local del repositorio del perfil personal. Solución 2 (recomendada) La segunda solución es, antes de hacer el fork, eliminar la copia local del repositorio que creamos para la organización. Para esto, en el menú, nos vamos a View &gt; Repository list . Hacemos click derecho en el repositorio que vamos a borrar. En este ejemplo el repositorio es repositorio1 y está bajo el nombre de la organización cit-uai Hacemos click Remove... Marcamos la opción Also move this repository to Recycle Bin y confirmamos haciendo click en el botón Remove Es importante precisar que esto NO borra el repositorio en GitHub, sino que solo borra la copia local de este. Ahora podemos repetir los pasos anteriores (desde el 1 en adelante) Observación Luego de terminar de clonar el Fork, en la lista de repositorios veremos solo un repositorio (con el nombre del repositorio al que le hicimos el Fork) indicando pertenece a nuestro perfil personal de GitHub. De forma similar, en el visor de archivos solo veremos una carpeta (con el nombre del repositorio al que le hicimos el Fork) Nos aparecerá la siguiente ventana, donde podemos escoger entre dos opciones. La opción To contribute to the parent project es ideal si el repositorio tiene (o tendrá) códigos que tú y tu equipo van a desarrollar. Ejemplo Tu y tu equipo van a desarrollar distintos códigos para el cálculo de algún indicador. En este repositorio aún se están probando mejoras al cálculo, optimizaciones, o características. Por otro lado, la opción For my own purposes es ideal para solo usar el código (posiblemente desarrollado por otro equipo), al que le harás pocas modificaciones, solo para usarlo. Ejemplo Tú y tu equipo solo quieren correr el cálculo de algún indicador, para alguna región en particular, por ejemplo, con la última version estable del código del cálculo (posiblemente desarrollada por otro equipo). En un principio, solo pretenden hacer pequeñas modificaciones en el código solo para usarlo, como por ejemplo ajustar las rutas de los insumos que van a utilizar. Es importante mencionar que, sea cual sea la opción que escojamos, esta si se puede cambiar después, en la configuración del repositorio. Escogemos la opción más adecuada y hacemos click en Continue Con esto ya tenemos nuestro nuestro Fork del repositorio listo para usarlo. "],["1.2-basic_use.html", "1.2 Uso Básico", " 1.2 Uso Básico En esta sección veremos el uso basico de Git usando la aplicación GitHub Desktop. Se asumirá que ya tienes un repositorio clonado de manera local en tu computador (Ver sección anterior ) Se verán los conceptos de commit branch push 1.2.1 Commits Los commits son la parte esencial git. Estos corresponden a registros de cambios que se hacen en una carpeta (repositorio). Generalmente los cambios que un repositorio puede tener son: Que se cree un archivo nuevo, que se elimine un archivo ya existente, o que un archivo ya existente sea modificado. Ver y reconocer cambios en el repositorio Cuando hacemos cambios en un repositorio, GitHub Desktop lo mostrara de esta manera. El signo [+] significa que el archivo es nuevo, mientras que el signo [•] significa que el archivo ya existía, pero que ha sido modificado. Por último, [–] indica que un archivo ha sido borrado. Crear registro (commit) Para crear un commit, seleccionamos en la barra lateral de la izquierda, que cambios queremos registrar. Luego nos vamos a la parte inferior donde tendremos que ponerle un nombre al commit, y opcionalmente una descripción. Para finalizar hacemos click en el botón azul Commit to main En el botón azul, el nombre de la rama ( en este caso main), puede cambiar según la rama en que estemos. Ver historial de cambios Si nos vamos a la pestaña history veremos un registro de todos los commits realizados. En esta lista, el primer commit (de arriba hacia abajo) es el commit más reciente, y los que siguen hacia abajo son cada vez más antiguos. Si hacemos click en alguno de los registros podremos observar los cambios registrados en ese commit. Para cada archivo (modificado), en caso de ser un archivo de texto, veremos en verde las lineas nuevas y en rojo las eliminadas. Por otro lado, por ejemplo, si es una imagen la que ha sido modificada, podremos visualizar como esta era antes y despues. 1.2.2 Branches (Ramas) Las branches (ramas) son un una funcionalidad muy util de git. Estas nos permiten, entre otras cosas, explorar e intentar cosas nuevas en un proyecto, sin el temor de echar a perder todo lo que ya esta bueno (y funcionando). Para imaginarnos esto mostraremos unos ejemplos en las siguientes imagenes. Por defecto, siempre se tiene una rama principal, que se suele llamar main (o master) y se crea automáticamente cuando se crean los repositorios. De alguna forma, todo lo ya hemos visto ha sido en la rama main. Acá tenemos una representación del historial de commits, algo que ya vimos en la aplicación Github Desktop. En esta, cada círculo es un commit y tiene un orden cronológico de izquierda a derecha. Es decir el primer commit que se hizo fue el a, luego se hizo el b, y por último el c. Lo importante es que todos los círculos (commits) tienen el mismo color, indicando que pertenecen a la misma rama. En particular, en este caso estamos representando la rama principal (main) Entonces, ahora, una branch (rama) (a partir de la rama principal), en términos simples, es una “copia” de nuestro espacio de trabajo, manteniendo los commits antiguos de la rama principal, pero permitiendo que los nuevos commits queden aislados. En esta figura, el orden cronológico de los commits también es de izquierda a derecha. Sin embargo, podemos observar que hay ramas presentes. Estas tienen un color distinto al de la rama principal (celeste), e indican, por ejemplo, la implementación de pequeñas o grandes características. Una cosa importante a considerar, es que se hace con las ramas luego de que lo que se ha implementado en estas (solución de algún error, nueva función o característica) está listo. Las ramas, pueden fusionarse en un proceso que se llama merge, que veremos más adelante. Generalmente la rama principal es la que se fusiona obteniendo los cambios de las ramas paralelas, para mantener el desarrollo estable en la rama principal. Un ejemplo de esto se muestra en la siguiente figura. Sin embargo, en esta figura vemos que si luego de la creación de la rama Feature, se han reaalizado un par de commits en ambas rama (main y Feature), por lo que en este caso el proceso de merge tratará de fusionar las modificaciónes de ambas ramas. En caso de haber conflictos uno tendrá que resolverlos de forma manual. (No es tan dificil como suena) Crear una rama En la aplicación Github Desktop seleccionamos donde dice Current Branch Hacemos click en el botón New branch. Escribimos el nombre que le queremos poner a la rama, y confirmamos haciendo click en el botón azul Create branch Con esto ya tendremos nuestra nueva rama creada, y estaremos en ella. Usando la rama Para usar una rama, solo tenemos que fijarnos que donde dice Current branch salga el nombre deseado. Sino es el caso, debemos cambiar de rama, y luego solo queda hacer cambios y commits, tal como vimos antes Cambiar de rama En la aplicación Github Desktop seleccionamos donde dice Current Branch Aparecerá una lisa con todas las ramas creadas. Seleccionamos la que queremos usar Ejemplo En esta subsección veremos de forma sencilla una utilidad práctica de usar ramas Siguiendo la línea de lo mostrado anteriormente, haremos modificaciones y commits en la rama new_branch. Luego la compararemos con la rama principal. Hemos creado 2 commit nuevos. En uno creamos un archivo nuevo, y en el otro modificamos ese archivo. Pero si nos cambiamos a la rama principal (‘main’), veremos que esos commits no existen. De forma más visual aún, si seleccionamos la rama new_branch en GitHub Desktop, y nos vamos a un explorador veremos los archivos del repositorio, incluyendo el archivo nuevo (nuevas_caracteristicas.txt). Pero si seleccionamos la rama main (en GitHub Desktop), ahora en el visor de archivos el nuevo archivo ya no aparece. Esto último ocurre no solo con la creación de archivos, sino que todos los archivos vuelven a como estaban en la rama principal. 1.2.3 Pull y Push De alguna manera, todos los ejemplos mostrados hasta ahora (en esta sección) han sido de forma local. Sin embargo, en algún momento necesitaremos sincronizar los repositorios locales con los remotos (GitHub). Esto es de alta utilidad, pues nos permitirá: - Tener un respaldo de nuestros códigos (y otros archivos) en la “nube”, - Trabajar en distintos computadores con un flujo ordenado. - Desarrollar código entre varias personas de forma eficiente y ordenada. Es aquí donde los conceptos de pull y push entran en acción. pull nos permitirá actualizar nuestro repositorio local en caso de haber cambios (commits) en el repositorio remoto. push hace la operación inversa. Lleva nuestros cambios (commits) locales al repositorio remoto. Push en GitHub Desktop Cada vez que hacemos un commit, estos en el historial aparecerán con una flecha hacia arriba, indicando que ese commit es local y dando la opción de subirlo al repositorio remoto. Para hacerlo hacemos click en Push origin Pull en GitHub Desktop En la aplicación, antes de hacer pull nos pedirá antes hacer un fetch. En términos simples y simplificados, la acción fetch verificará si en el repositorio remoto hay o no cambios. En caso de haber cambios, nos mostrará entonces la opción de hacer pull. Para hacerlo hacemos click en Fetch origin y luego en Pull origin "],["1.3-uso-colaborativo.html", "1.3 Uso Colaborativo", " 1.3 Uso Colaborativo En esta sección veremos prácticas recomendadas para el trabajo colaborativo, usando GitHub 1.3.1 Forks Anteriormente ya vimos como crear forks, pero es importante resaltar su utilidad. Estos nos permiten tener una “copia” individual de un repositorio, en el cual podemos desarrollar partes del proyecto con cierta libertad. Todo esto, con el fin posterior de proponer, lo que hayamos desarrollado, al repositorio original. En esta figura vemos la estructura recomendada para el flujo de trabajo. Para un proyecto, el repositorio principal se ubicará en el perfil de la organización (CIT-UAI), mientras que cada desarrollador tendrá su propio fork. Se recomienda en el fork usar ramas. Por ejemplo si se desea implementar una nueva característica, llamar la rama con un nombre acorde a lo que se planea desarrollar (ej: new_functions). Luego, trabajar en ella y registrar varios commits con los avances, para luego, proponer los commits al repositorio principal (el de la organización) con una pull request. Pull requests GitHub (y otras plataformas similares) nos permiten hacer pull requests. Estas consisten en proponer una serie de commits a un repositorio principal. La ventaja es que permite a los desarrolladores observar cada cambio, comentar cada detalle, y evaluar si se añaden los commits al repositorio principal. Plot title. En esta figura se muestra un ejemplo de como se crea una pull request. Vemos como se compara el repositorio que pertenece al perfil CIT-UAI con el que pertenece a la cuenta personal (fork). De igual forma notamos que se está comparando la rama main del repositorio principal, con la rama dev del fork. Plot title. Luego de crear la PR vemos cuantos commits de diferencia hay entre el repositorio principal y el fork personal. Si nos vamos a la pestaña Files Changed veremos todos los archivos modificados considerando todos los commits en que difieren los repositorios. "],["2-applications.html", "Chapter 2 Applications", " Chapter 2 Applications Some significant applications are demonstrated in this chapter. "],["2.1-example-one.html", "2.1 Example one", " 2.1 Example one "],["2.2-example-two.html", "2.2 Example two", " 2.2 Example two "],["3-final-words.html", "Chapter 3 Final Words", " Chapter 3 Final Words We have finished a nice book. "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
